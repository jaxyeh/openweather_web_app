import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

export const Status = {
  Idle: 'idle',
  Loading: 'loading',
  Failed: 'failed',
};

const initialState = {
  status: Status.Idle,
  errorMessage: '',
  currentData: {},
  forecastData: {},
};

// The function below is called a thunk and allows us to perform async logic.
export const fetchWeatherData = createAsyncThunk(
  'weather/fetchWeatherData',
  async (zipcode) => {
    return fetch(`/full-report?zipcode=${parseInt(zipcode)}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Unable to find data for this zipcode!');
        }
        return response.json();
      });
  }
);

export const weatherSlice = createSlice({
  name: 'weather',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchWeatherData.pending, (state) => {
        state.status = Status.Loading;
      })
      .addCase(fetchWeatherData.fulfilled, (state, action) => {
        state.status = Status.Idle;
        state.currentData = action.payload.current.current;
        state.forecastData = action.payload.forecast;
      })
      .addCase(fetchWeatherData.rejected, (state, action) => {
        state.status = Status.Failed;
        state.errorMessage = action.error.message;
      });
  },
});

export const statusSelector = (state) => state.weather.status;
export const errorMessageSelector = (state) => state.weather.errorMessage;
export const cityNameSelector = (state) => {
  return 'city' in state.weather.forecastData ? state.weather.forecastData.city.name : undefined;
}
export const currentTempSelector = (state) => state.weather.currentData.temp;
export const currentUVISelector = (state) => state.weather.currentData.uvi;
export const forecastDataListSelector = (state) => state.weather.forecastData.list;

export default weatherSlice.reducer;
